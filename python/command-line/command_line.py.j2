#!/usr/bin/env python3
"""
{{ program_description }}
"""

__author__ = 'Yosuke Mizutani'
__version__ = '0.0.1'
__license__ = 'Apache License, Version 2.0'

# imports standard libraries
import sys
import argparse
{% if logging_enabled %}import logging{% endif %}

# imports extrenal libraries
{% if external_modules %}
try:
    {% for module in external_modules %}
    import {{ module }}
    {% endfor %}
except ImportError:
    sys.stderr.writelines([
        'Failed to load modules.\n',
        'Please run: pip install {{ ' '.join(external_modules) }}\n',
    ])
    sys.exit(1)
{% endif %}
    
{% if logging_enabled %}
def get_logger(log_level=logging.CRITICAL + 1):
    """Logger settings."""

    logging.basicConfig(
        level=log_level,
        format="%(asctime)s [%(levelname)s] %(message)s",
        stream=sys.stderr)
    logger = logging.getLogger(__name__)
    return logger
{% endif %}

def get_parser():
    """Argument parser."""

    parser = argparse.ArgumentParser(description='{{ program_description }}')
    parser.add_argument('-v', '--version', action='version', version=f'%(prog)s {__version__}')
{% if logging_enabled %}
    parser.add_argument('--log-level', choices=['crit', 'error', 'warn', 'info', 'debug', 'none'], default='info', help='log level')
{% endif %}
    return parser


def main(args):
    """Entry point of the program. """

{% if logging_enabled %}
    # get logger
    logger = get_logger({'crit': logging.CRITICAL, 'error': logging.ERROR, 'warn': logging.WARNING, 'info': logging.INFO, 'debug': logging.DEBUG, 'none': logging.CRITICAL + 1}[
        args.log_level])
{% endif %}

    # main logic


if __name__ == '__main__':
    main(get_parser().parse_args())

